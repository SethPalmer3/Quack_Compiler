//
// Moved grammar out of the parser file because it was
// getting unwieldy.  This is still a stub, but I've added some more
// pieces to illustrate how if/elif/elif/else can be flatted down into
// nested if/else (including the potential else to be omitted)
//
// One advantage of grammar in a separate file is that Lark error messages
// citing line# will correspond to actual line#.
//

?start: program

program: classes block
classes: clazz*

clazz: _class_sig  "{" methods block "}"
_class_sig: "class" name "("  formals ")" [ "extends" name ]
methods: method*

formals: [formal ("," formal)*]
formal: name ":" name

?constructor: block

name: IDENT -> ident

block: _stmt*

_stmt: ifstmt
      | assignment ";"
      | expr ";"
      | while_loop

while_loop: "while" expr "{" block "}"

assignment: l_expr [":" name] "=" expr

// An 'if' statement may have zero or more elifs and
// zero or one else
ifstmt: "if" _cond  _curlyblock otherwise
_curlyblock: "{" block "}"
otherwise:  -> block   // This creates an annoying empty block
   | "else" _curlyblock -> elseblock
   | "elif" _cond _curlyblock otherwise -> ifstmt

_cond: expr
?expr: logop

?logop: comparison
      | logop "and" comparison -> and_op
      | logop "or" comparison -> or_op
      | "not" logop -> not_op

?comparison: sum
            | comparison "<" sum -> lessthan
            | comparison ">" sum -> greaterthan
            | comparison "==" sum -> equal

?sum: product
   | sum "+" product -> add
   | sum "-" product -> sub

?product: factor
      | product "*" factor -> mul
      | product "/" factor -> div

?factor: var 
      | factor "." ident "(" actuals ")" -> call
      | ident "(" actuals ")" -> class_init

?var: constant
   | l_expr
   | "(" expr ")"

constant: INT
         | ESCAPED_STRING
         | BOOLEAN
         | NOTHING
         | "this" -> this_ref

?l_expr: ident -> variable_ref
      | expr "." ident -> field_ref

NOTHING: "nothing"
BOOLEAN: "true" | "false"
ident: IDENT

actuals: [expr ("," expr)* ]

method: "def" name "(" formals ")" returns "{" block return_stmt "}"
?return_stmt: [ "return" expr ]
returns: (":"  name)?
//?return_stmt: "return" expr

IDENT: /[_a-zA-Z][_a-zA-Z0-9]*/


%import common.WS
%import common.INT
%import common.ESCAPED_STRING
%ignore WS
